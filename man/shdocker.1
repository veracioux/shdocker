.\" shdocker
.\"
.\" Copyright (c) 2021 The Shdocker Contributors
.\"
.\" Permission is hereby granted, free of charge, to any person obtaining a copy
.\" of this software and associated documentation files (the "Software"), to deal
.\" in the Software without restriction, including without limitation the rights
.\" to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
.\" copies of the Software, and to permit persons to whom the Software is
.\" furnished to do so, subject to the following conditions:
.\"
.\" The above copyright notice and this permission notice shall be included in all
.\" copies or substantial portions of the Software.
.\"
.\" THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
.\" IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
.\" FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
.\" AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
.\" LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
.\" OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
.\" SOFTWARE.

.\" Define a code example block
.de CODE
.br
.RS
.nf
.nh
..
.\" End code example block
.de ECODE
.hy
.fi
.RE
..

.TH SHDOCKER 1 "" "" "User Commands"
.SH NAME
shdocker \- a tiny shell utility to dynamically generate dockerfiles
.SH SYNOPSIS
\fBshdocker\fR [\fB--help\fR] [\fB--version\fR]

\fBshdocker\fR [\fIOPTIONS\fR] [--] [\fIDOCKER_BUILD_ARGS...\fR]

.SH DESCRIPTION

\fBTL;DR\fR It takes but a second to learn \fBshdocker\fR. In most cases, a look at
\fIEXAMPLES\fR will suffice. A look at \fIMIGRATING FROM DOCKERFILE\fR won't
hurt either as it may prevent common problems.

\fBShdocker is a tiny bash program with these features:\fR

.RS 4
- Use shell syntax to customize the docker build (\fBif statements\fR,
  \fBenvironment variables\fR)

- Generate multiple docker images from a single \fBshDockerfile\fR

- No learning curve if you already know bash and docker
.RE

The procedure is dead simple:

.RS 4
- Create a shDockerfile

- Run \fBshdocker\fR with or without options

- End up with an actual Dockerfile or with a built image
.RE

\fBShdocker\fR uses a \fIshDockerfile\fR instead of a \fIDockerfile\fR. The
migration from a Dockerfile to a shDockerfile is fairly easy, and in many cases
even \fBunnecessary\fR. The \fIEXAMPLES\fR section should convince you.

The beauty of a shDockerfile is that its commands are a superset of a normal
Dockerfile's commands. Most valid Dockerfiles are also valid shDockerfiles.
Those that aren't can be made so with trivial modifications (see \fIMIGRATING
FROM DOCKERFILE\fR).

Most common invocations of \fBshdocker\fR will generate a Dockerfile (either as
a file or print to stdout, see \fIOPTIONS\fR). But if you specify any positional
arguments, shdocker will also invoke \fBdocker build\fR with those arguments,
using the generated Dockerfile for that build.

\fBNOTE:\fR shDockerfile is just a bash script! In it, you can use
anything you would be able to use in any bash script. The only commands that
have special behavior are those supported by Dockerfile (\fBRUN\fR, \fBCMD\fR,
etc.), and those defined in \fIAdditional features\fR.

\fBNOTE:\fR Everything that is printed to stdout inside the shDockerfile will be
included in the generated Dockerfile.

\fBNOTE:\fR The exit code of the shDockerfile is important. If it is != 0,
shdocker will abort the operation.

\fBNOTE:\fR In order to protect your system from malformed/malicious
shDockerfiles, the Dockerfile generation process happens inside a docker
container based on an official \fBalpine\fR image.

\fBWARNING:\fR If you are porting an existing Dockerfile to a more flexible
shDockerfile, take a look at \fIMIGRATING FROM DOCKERFILE\fR first.

.SH MIGRATING FROM DOCKERFILE

When rewriting a \fIDockerfile\fR as a \fIshDockerfile\fR, you must have a fair
understanding of bash. Dockerfile commands can contain symbols that have a
special meaning in bash, such as substitutions, logical operators, redirection,
pipes, etc. You have to be conscious of what gets parsed by the shell and what
will end up verbatim in the generated Dockerfile. Some of the caveats here
might seem overly complicated, but you will get the gist of it eventually.
In any case, please remember:

.RS 4
\fBThe best way to learn if your shDockerfile produces the desired Dockerfile
is to generate a Dockerfile and inspect the output.\fR
.RE

For example, if the following line is found in a Dockerfile, it can't be
directly copied into a shDockerfile:

.CODE
RUN mkdir dir && chmod -R user dir
.ECODE

If you just copied it verbatim, it would be parsed as two commands:

.CODE
RUN mkdir dir  # This will be included into the Dockerfile
chmod -R user dir  # This is a regular command
.ECODE

which is not what we want.

To get around this, we could wrap the offending part in quotes, like:

.CODE
RUN mkdir dir \fB'&&'\fR chmod -R user dir
.ECODE

\fBNOTE:\fR Remember that commands matching those in a regular Dockerfile will
always be capitalized.

.TP
\fBQuotes\fR
.RS 4

Quotes and shell variables are parsed and expanded by the shell before they end
up in the generated Dockerfile. For example:

.CODE
RUN cp "$file" destination/
.ECODE

will generate the following Dockerfile (assuming \fBfile=data.txt\fR):

.CODE
RUN cp data.txt destination/
.ECODE

Note that shdocker will always preserve individual arguments:

.CODE
# shDockerfile:
RUN cat 'my file.txt'
RUN echo '$variable'
RUN echo '"test"'

# Generated Dockerfile:
RUN cat "my file.txt"
RUN echo "$variable"
RUN echo "\\"test\\""
.ECODE

You probably noticed that the single quotes were changed to double quotes.
Shdocker guarantees that the individual arguments will be preserved, but it
doesn't guarantee that the same type of quotes will be used in the output. By
default, it always uses double rather than single quotes in the output (as a
technical necessity).

Shdocker only quotes arguments that contain spaces, quotes or \fB$\fR signs.
This means that any unnecessary quotes around arguments in the shDockerfile will
be removed in the generated Dockerfile.

\fBNOTE:\fR You can disable the automatic quoting of arguments by placing a
\fBSHDOCKER quote off\fR command in the shDockerfile (see \fIAdditional
features\fR). This way, the following shDockerfile:

.CODE
RUN echo '$variable'
.ECODE

will result in the following Dockerfile:

.CODE
RUN echo $variable
.ECODE

.SH OPTIONS

.TP
.BR \-h ", " \-\-help
Prints a help message.

.TP
.BR \-v ", " \-\-version
Prints the \fBshdocker\fR version and supported \fBdocker\fR version.

.TP
.BR \-s ", " \-\-shdockerfile " \fIFILE\fR"
Use \fIFILE\fR as the input shDockerfile. If this option is missing,
shDockerfile from the working directory is used.

.TP
.BR \-d ", " \-\-dockerfile " \fIFILE\fR"
Generate the Dockerfile as \fIFILE\fR. If \fIFILE\fR is equal to '-', output
will be to stdout.

.SH ENVIRONMENT

shDockerfiles are bash scripts, with a few predefined commands matching those
available in a regular Dockerfile. In addition to those, shDockerfile accepts
some additional commands (see \fIAdditional features\fR).

Since shDockerfile is just a bash script, regular and environment variables
can be used freely. The only limitation is that variables starting with \fB__\fR
(two underscores) are reserved for \fBshdocker\fR's internal use. The same goes
for bash functions, with the addition of the usual Dockerfile commands
(\fBRUN\fR, \fBENV\fR, ...) which are reserved as well of course.

.SS Additional features

.TP
\fBREQUIRE_ENV\fR
.RS 4
Require the existence of environment variables with the specified names. If the
specified variables do not exist, \fBshdocker\fR will refuse to continue
processing the shDockerfile, and will exit with a non-zero code.
.RE

.TP
\fBTAG\fR
.RS 4
Set a default tag for the built image when building using \fBshdocker\fR, if
\fB-t/--tag\fR is not specified as a \fBdocker build\fR argument. This command
has no effect on the generated Dockerfile.
.RE

.TP
\fB##\fR (double hash comments)
.RS 4
Comments that start with two hashes at the beginning of a line (potentially
preceded by whitespace) will be included in the generated Dockerfile. Regular
bash comments starting with a single hash are also considered comments in
shdocker, but they won't be exported to the Dockerfile.
.RE

.TP
\fBSHDOCKER\fR
.RS 4
Control the behavior of the Dockerfile generation process in shdocker.

Arguments:

  \fBquote\fR [ \fBon\fR | \fBoff\fR ]

    Turn on/off the automatic quoting of arguments. When on,
    all arguments to the docker commands (\fBRUN\fR, \fBENV\fR, ...) will
    be automatically quoted so that arguments with special
    characters (spaces, quotes, etc) don't get parsed a second
    time during \fBdocker build\fR.
.RE

.SH EXAMPLES

.SS Simple usage of environment variables
.BR

Take a look at this example file:

.CODE
# file: shDockerfile
FROM "$base"
RUN "echo 'This image was built on top of the $base image'"
.ECODE

We want to generate multiple Dockerfiles with different values for \fI$base\fR.
Using shdocker, we can read the base image name from the \fIbase\fR environment
variable, taken at the point where \fBshdocker\fR was invoked.

If we run \fBbase=ubuntu shdocker --dockerfile Dockerfile\fR, this will generate the
following Dockerfile:

.CODE
FROM ubuntu
RUN echo 'This image was built on top of the ubuntu image'
.ECODE

If don't specify the \fB--dockerfile\fR option, the output will be printed to
stdout instead.

We can then pass this Dockerfile to the \fBdocker build\fR command, or we can
just build it directly by running:

.RS 4
base=ubuntu shdocker --dockerfile Dockerfile \fB-- . --tag test\fR
.RE

Any time you specify a context directory, shdocker will also build an image from
the generated Dockerfile. Note that the \fB--\fR is necessary to tell
\fBshdocker\fR that it shouldn't parse \fB--tag\fR as an option to itself, but
let \fBdocker build\fR parse it as its own.

.SS More advanced example utilizing bash features
.BR

.\" Keep in sync with examples/
.\" TODO Make this file a tem template
Take this shDockerfile for example:

.CODE
# file: Buildrules
REQUIRE_ENV base
[ -z "$ver" ] && ver="latest"
FROM "$base"
# Install dependencies
if [ "$base" = "ubuntu" ]; then
    RUN apt-get install git
elif [ "$base" = "archlinux" ]; then
    RUN pacman -S install git
else
    : # Do nothing
fi
CMD git clone "https://github.com/veracioux/shdocker"
# Default tag in case you don't specify a --tag option
TAG "test:$ver-$base"
.ECODE

If you run:

.RS 4
\fBbase=archlinux ver=0.1.0 shdocker --shdockerfile Buildrules --dockerfile Dfile\fR
.RE

you will get the following Dockerfile:

.CODE
FROM archlinux
# Install dependencies
RUN pacman -S install git
CMD git clone https://github.com/veracioux/shdocker
.ECODE

If you extend the last command by appending a context directory argument, it
will build an image using that context directory. Thanks to the \fBTAG\fR
command, if you don't pass a \fB-t/--tag\fR option , the image will be tagged
\fBtest:0.1.0-archlinux\fR.

\fBWARNING:\fR If you are porting an existing Dockerfile to a more flexible
shDockerfile, take a look at \fIMIGRATING FROM DOCKERFILE\fR first.

\fBNOTE:\fR All the demonstrated options have short versions (see \fIOPTIONS\fR).

.\" TODO Projects using shdocker

.SH SEE ALSO
dockerfile(1), bash(1), docker(1)
