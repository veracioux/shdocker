#!/usr/bin/env bash

# shdocker
#
# Copyright (c) 2022 The Shdocker Contributors
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in all
# copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE.

__SHDOCKER_VERSION='develop'  # Actual version injected by Makefile
__DOCKER_VERSION=''  # Ditto

__print_usage() {
    echo -e "usage: shdocker [OPTIONS] [-- DOCKER_BUILD_ARGS...]"
    echo -e "\noptions:"
    echo -e "  -h, --help               \tshow this help message and exit"
    echo -e "  -v, --version            \tprint shdocker version and supported docker version"
    echo -e "  -s, --shdockerfile FILE  \tinput shDockerfile"
    echo -e "  -d, --dockerfile   FILE  \toutput Dockerfile, or - for stdout"
}

__print_and_exec() {
    echo "$@"
    "$@"
}

# ┏━━━━━━━━━━━━━━━━┓
# ┃ DEFAULT VALUES ┃
# ┗━━━━━━━━━━━━━━━━┛

# Default output dockerfile in case it's not specified as an option
__DEFAULT_DOCKERFILE="$(mktemp -d /tmp/shdocker.XXXXXXXX)/Dockerfile"
# Pseudo output Dockerfile ('-' is a special value meaning stdout)
__PSEUDO_DOCKERFILE="$__DEFAULT_DOCKERFILE"
__DOCKERFILE_COMMANDS=(
    FROM MAINTAINER RUN CMD POINT LABEL EXPOSE ENV ADD COPY ENTRYPOINT VOLUME
    USER WORKDIR ARG ONBUILD STOPSIGNAL HEALTHCHECK SHELL
)
__SHDOCKERFILE="$(realpath shDockerfile)"
# Indicates whether a dockerfile was specified in options
__OPT_DOCKERFILE=""

# ┏━━━━━━━━━━━━━━━━━━━━━┓
# ┃ PARSE CLI ARGUMENTS ┃
# ┗━━━━━━━━━━━━━━━━━━━━━┛

__arguments=$(getopt --options 'hvs:d:'\
                        --long 'help,version,shdockerfile:,dockerfile:'\
                        --name 'shdocker'\
                            -- "$@")
[ $? != 0 ] && exit 1

# Transform options generated by getopt into a proper array
eval __arguments=(${__arguments[@]})
# Split array __arguments into two arrays: __options (arguments before '--')
# and __positional (arguments after '--')
for i in "${!__arguments[@]}"; do
    if [ "${__arguments[$i]}" = '--' ]; then
        __options=("${__arguments[@]::$i}")
        __positional=("${__arguments[@]:((i+1))}")
        break
    fi
done

for i in "${!__options[@]}"
do
    case "${__options[$i]}" in
        '-h'|'--help')
            __print_usage
            exit ;;
        '-v'|'--version')
            echo "shdocker version $__SHDOCKER_VERSION"
            echo "target docker version: $__DOCKER_VERSION"
            exit ;;
        '-d'|'--dockerfile')
            __OPT_DOCKERFILE="true"
            __dockerfile="${__options[((i+1))]}"
            if [ "$__dockerfile" != "-" ]; then
                __PSEUDO_DOCKERFILE="$(realpath "$__dockerfile")"
            else
                __PSEUDO_DOCKERFILE="-"
            fi
            continue ;;
        '-s'|'--shdockerfile')
            __SHDOCKERFILE="$(realpath "${__options[((i+1))]}")"
            continue ;;
    esac
done

if [ ! -f "$__SHDOCKERFILE" ]; then
    echo "shdocker: error: File $__SHDOCKERFILE could not be found."
    exit 1
fi

if [ "$__PSEUDO_DOCKERFILE" != "-" ] && [ ! -d "$(dirname "$__PSEUDO_DOCKERFILE")" ]; then
    echo "shdocker: error: Cannot output dockerfile to $__PSEUDO_DOCKERFILE"
    echo "Directory does not exist."
    exit 1
fi

if [ -z "$__OPT_DOCKERFILE" ] && [ "${#__positional[@]}" = 0 ]; then
    __PSEUDO_DOCKERFILE="-"
fi

__dockerfile_command() {
    echo "$@"
}

# ┏━━━━━━━━━━━━━━━┓
# ┃ API FUNCTIONS ┃
# ┗━━━━━━━━━━━━━━━┛

for __docker_cmd in "${__DOCKERFILE_COMMANDS[@]}"; do
    eval "$__docker_cmd() { __dockerfile_command $__docker_cmd \"\$@\"; }"
done

TAG() {
    __IMAGE_TAG="$1"
}

# Specify a list of environment variables that must exist when shdocker is run.
# If some of the variables don't exist, print an error message and exit.
#
#   Usage: REQUIRE_ENV VARIABLE_NAMES...
#
REQUIRE_ENV() {
    local missing
    missing="$(
        for var in "$@"; do
            [[ ! -v "$var" ]] && echo "$var"
        done
    )"
    if [ -n "$missing" ]; then
        echo "The following environment variables must be set for this shDockerfile:" >&2
        echo "$missing" | sed 's/^/    /' >&2
        exit 1
    fi
}

# Print a comment with the content taken from arguments
_() {
    echo '#' "$@"
}

# ┏━━━━━━━━━━━━━━━━━━━━━━━┓
# ┃ SHDOCKER SCRIPT START ┃
# ┗━━━━━━━━━━━━━━━━━━━━━━━┛

if [ "$__PSEUDO_DOCKERFILE" != "-" ]; then
    source "$__SHDOCKERFILE" > "$__PSEUDO_DOCKERFILE"
    __BUILD_DOCKERFILE="$__PSEUDO_DOCKERFILE"
else
    source "$__SHDOCKERFILE" | tee "$__DEFAULT_DOCKERFILE"
    __BUILD_DOCKERFILE="$__DEFAULT_DOCKERFILE"
fi

# Docker build

__EXTRA_ARGS=()
if [ -n "$__IMAGE_TAG" ]; then
    __EXTRA_ARGS=(--tag "$__IMAGE_TAG")
fi

if [ "${#__positional[@]}" -gt 0 ]; then
    __print_and_exec docker build "${__EXTRA_ARGS[@]}" "${__positional[@]}" -f "$__BUILD_DOCKERFILE"
fi

# vim: filetype=sh foldmethod=syntax
