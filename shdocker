#!/usr/bin/env bash

# shdocker
#
# Copyright (c) 2022 The Shdocker Contributors
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in all
# copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE.

# ┏━━━━━━━━━━━━━┓
# ┃ Description ┃
# ┗━━━━━━━━━━━━━┛
#
# Shdocker can run in two modes:
#
# 1. The first one just takes in a shDockerfile and generates a Dockerfile,
#    writing it either to a file or to stdout
# 2. The second one does all of the above and also builds an image from the
#    generated Dockerfile
#
# Since the shDockerfile can contain arbitrary shell commands, and there is no
# straightforward way to setup a sandbox, the processing of the shDockerfile
# must be done inside a container in order to protect the user from fatal
# mistakes.
#
# Therefore, the generation of the Dockerfile is performed by calling the
# convert.sh script in a docker container.

__SHDOCKER_VERSION="develop"  # Actual version is injected by Makefile
__DOCKER_VERSION="develop"    # Ditto

# ┏━━━━━━━━━━━━━━━━━━┓
# ┃ HELPER FUNCTIONS ┃
# ┗━━━━━━━━━━━━━━━━━━┛

# Check if the 'docker' command exists on the system
__check_docker() {
    if ! which docker >/dev/null; then
        echo "shdocker: error: docker command not found on the system" 2>&1
        # TODO add docker version check
        exit 1
    fi
}

# Usage: __find_docker_image <image_name>
# Prints the exact image reference (<image_name>:<tag>) or returns 1 if it
# doesn't exist
__find_docker_image() {
    results="$(
        docker images --filter "reference=$1:*" \
            --format "{{.Repository}}:{{.Tag}}" |
        head -1
        )"
    [ -n "$results" ] && echo "$results"
}

# Run shdocker inside a docker container
__pull_bash_image_if_missing() {
    if __inside_container; then return 0; fi
    local bash_image response
    if [ -t 1 ]; then
        echo -ne "\033[1;34m" >&2
        echo -e "To protect you from malicious shDockerfiles, shdocker must run" \
                "some\ncommands inside a docker container." >&2
        echo -ne "\033[1;0m" >&2
    fi
    bash_image="$(__find_docker_image bash)"
    if [ -z "$bash_image" ]; then
        echo "We must run 'docker pull bash' (only this first time)." 2>&1
        echo -n "-- Is that OK? [y/N]: " 2>&1
        read -n 1 response
        if [ "$response" = "y" ] || [ "$response" = "Y" ]; then
            echo
            docker pull bash || { echo "Pulling failed. Aborting." 2>&1; exit 1; }
        else
            exit 1
        fi
    fi
}

# Test if we are currently in a docker container
__inside_container() {
    [ -f "/.dockerenv" ]
}

__bash_in_container() {
    if __inside_container; then
        cat | bash "$@"
    else
        cat \
            | docker run \
                --env-file <(env | cut -f1 -d= | grep -v '^PATH$') \
                --workdir "/shdocker" \
                --volume "$(realpath "$(dirname "$__SHDOCKERFILE")"):/shdocker:ro" \
                --volume "/tmp:/tmp:rw" \
                -i bash bash "$@"
    fi
}

# Convert shDockerfile from stdin to a Dockerfile and print it to stdout
__convert() {
    local converter  # Path to the shDockerfile->Dockerfile converter script
    if [ "$__SHDOCKER_VERSION" = "develop" ]; then
        converter="$(dirname "${BASH_SOURCE[0]}")"/converter.sh 
    else
        converter="$__SHDOCKER_PREFIX"/lib/shdocker/converter.sh
    fi
    local __SHDOCKER_INSIDE_CONTAINER EOF
    export __SHDOCKER_INSIDE_CONTAINER='true'

    local -
    set -e

    EOF="__SHDOCKER_UNLIKELY_EOF_CHARACTER"
    # Concatenate the converter script with the shDockerfile and pipe it to bash
    # launched inside a docker container.
    {
        cat "$converter"
        cat
    } |
        # Make it so that ## comments are included in the output
        sed "s/^[[:space:]]*##\(.*\)/cat <<$EOF\n#\1\n$EOF/g" |
        # Source by bash running in a docker container
        __bash_in_container
}

__print_and_exec() {
    echo "$@"
    "$@"
}

if [ "$EUID" == '0' ] && ! __inside_container; then
    echo "shdocker: error: Root user can run shdocker only in a container!" >&2
    exit 1
fi

__print_usage() {
    echo -e "usage: shdocker [OPTIONS] [-- DOCKER_BUILD_ARGS...]"
    echo -e "\noptions:"
    echo -e "  -h, --help               \tshow this help message and exit"
    echo -e "  -v, --version            \tprint shdocker version and supported docker version"
    echo -e "  -s, --shdockerfile FILE  \tinput shDockerfile"
    echo -e "  -d, --dockerfile   FILE  \toutput Dockerfile, or - for stdout"
}

# ┏━━━━━━━━━━━━━━━━┓
# ┃ DEFAULT VALUES ┃
# ┗━━━━━━━━━━━━━━━━┛

# Default output dockerfile in case it's not specified as an option
__RANDOM_DOCKERFILE="$(mktemp -d /tmp/shdocker.XXXXXXXX)/Dockerfile"
# Pseudo output Dockerfile ('-' is a special value meaning stdout)
__PSEUDO_DOCKERFILE="$__RANDOM_DOCKERFILE"
# Input is from a tty => use default shDockerfile
if [ -t 0 ]; then
    __SHDOCKERFILE="$(realpath shDockerfile)"
# Else, the contents of shDockerfile will be read from stdin
else
    __SHDOCKERFILE=()
fi
# Indicates whether a dockerfile was specified in options
__OPT_DOCKERFILE=""

# ┏━━━━━━━━━━━━━━━━━━━━━┓
# ┃ PARSE CLI ARGUMENTS ┃
# ┗━━━━━━━━━━━━━━━━━━━━━┛

__arguments=$(getopt --options 'hvs:d:'\
                        --long 'help,version,shdockerfile:,dockerfile:'\
                        --name 'shdocker'\
                            -- "$@")
[ $? != 0 ] && exit 1

# Transform options generated by getopt into a proper array
eval __arguments=(${__arguments[@]})
# Split array __arguments into two arrays: __options (arguments before '--')
# and __positional (arguments after '--')
for i in "${!__arguments[@]}"; do
    if [ "${__arguments[$i]}" = '--' ]; then
        __options=("${__arguments[@]::$i}")
        __positional=("${__arguments[@]:((i+1))}")
        break
    fi
done

for i in "${!__options[@]}"
do
    case "${__options[$i]}" in
        '-h'|'--help')
            __print_usage
            exit ;;
        '-v'|'--version')
            echo "shdocker version $__SHDOCKER_VERSION"
            echo "target docker version: $__DOCKER_VERSION"
            exit ;;
        '-d'|'--dockerfile')
            __OPT_DOCKERFILE="true"
            __dockerfile="${__options[((i+1))]}"
            if [ "$__dockerfile" != "-" ]; then
                __PSEUDO_DOCKERFILE="$(realpath "$__dockerfile")"
            else
                __PSEUDO_DOCKERFILE="-"
            fi
            continue ;;
        '-s'|'--shdockerfile')
            __SHDOCKERFILE="$(realpath "${__options[((i+1))]}")"
            if [ "$__SHDOCKERFILE" != "-" ]; then
                __SHDOCKERFILE="$(realpath "$__SHDOCKERFILE")"
            else
                __SHDOCKERFILE=()
            fi
            continue ;;
    esac
done

__inside_container || __check_docker

if [ -n "$__SHDOCKERFILE" ] && [ ! -f "$__SHDOCKERFILE" ]; then
    echo "shdocker: error: File $__SHDOCKERFILE could not be found."
    exit 1
fi

if [ "$__PSEUDO_DOCKERFILE" != "-" ] && [ ! -d "$(dirname "$__PSEUDO_DOCKERFILE")" ]; then
    echo "shdocker: error: Cannot output dockerfile to $__PSEUDO_DOCKERFILE"
    echo "Directory does not exist."
    exit 1
fi

if [ -z "$__OPT_DOCKERFILE" ] && [ "${#__positional[@]}" = 0 ]; then
    __PSEUDO_DOCKERFILE="-"
fi

# Generate Dockerfile from shDockerfile

__pull_bash_image_if_missing
# This env variable is passed to converter.sh
export __IMAGE_TAG_OUTPUT_FILE="$(mktemp -u /tmp/shdocker.XXXXXXXXXXXXXXXXXXXX)"
__dockerfile_content="$(cat "${__SHDOCKERFILE[@]}" | __convert)"

__exit_status_code="$?"
if [ "$__exit_status_code" != 0 ]; then
    echo "$__dockerfile_content"
    exit "$__exit_status_code"
fi

if [ "$__PSEUDO_DOCKERFILE" != "-" ]; then
    # Output Dockerfile is a real file
    echo "$__dockerfile_content" > "$__PSEUDO_DOCKERFILE"
    __BUILT_DOCKERFILE="$__PSEUDO_DOCKERFILE"
else
    # Output is to stdout
    echo "$__dockerfile_content" | tee "$__RANDOM_DOCKERFILE"
    __BUILT_DOCKERFILE="$__RANDOM_DOCKERFILE"
fi

# Run docker build from the generated Dockerfile
if [ "${#__positional[@]}" -gt 0 ]; then
    # Build
    __EXTRA_ARGS=()
    __IMAGE_TAG="$(cat "$__IMAGE_TAG_OUTPUT_FILE")"
    if [ -n "$__IMAGE_TAG" ]; then
        __EXTRA_ARGS=(--tag "$__IMAGE_TAG")
    fi
    __print_and_exec docker build "${__EXTRA_ARGS[@]}" "${__positional[@]}" \
        -f "$__BUILT_DOCKERFILE"
fi

# vim: filetype=sh foldmethod=syntax
